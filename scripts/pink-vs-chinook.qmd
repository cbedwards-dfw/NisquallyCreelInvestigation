---
title: "data_pull"
author: "Collin Edwards, Evan Booher, Colt Holley, ... "
format: html
editor: visual
---

```{r}
library("CreelEstimateR")
library("suncalc")
library("tidyverse")
library("patchwork")
library("gt")
library("mgcv")
library("gratia")
```

### From Evan - test pulling data and plot daily catch of Chinook and pink salmon from creel interviews

```{r}

# test out the use of the newly packaged up fetch_dwg function, creating a vector of the names of the Nisqually fisheries we want to pull into R

# define fisheries we want data for
fisheries <- c("Nisqually salmon 2021", "Nisqually salmon 2022", "Nisqually salmon 2023")

# download the data from data.wa.gov
datapull <- set_names(fisheries) |> 
  map(~fetch_dwg(fishery_name = .x))

interviews <- datapull$`Nisqually salmon 2023`$interview |> 
  bind_rows(datapull$`Nisqually salmon 2022`$interview, datapull$`Nisqually salmon 2021`$interview)

# bind date and waterbody data to the creel interview-based catch records
catch <- datapull$`Nisqually salmon 2023`$catch |> 
  bind_rows(datapull$`Nisqually salmon 2022`$catch, datapull$`Nisqually salmon 2021`$catch) |>
  left_join(interviews |> 
              select(interview_id, event_date, water_body),
            by = "interview_id") |> 
  mutate(
    year = year(event_date),
    month = month(event_date)
  )

# plot total daily encounters of Chinook and pink salmon for 2021
catch |> 
  filter(species %in% c("Pink", "Chinook") 
         & (year == 2021) 
         & month %in% c(7,8,9,10)) |> 
  group_by(year, event_date, species, fin_mark) |>
  summarise(daily_catch = sum(fish_count)) |> 
  ggplot(aes(event_date, daily_catch, color = species)) +
  ggtitle("2021") +
  geom_point()

# plot total daily encounters of Chinook and pink salmon for 2023
catch |> 
  filter(species %in% c("Pink", "Chinook") 
         & (year == 2023) 
         & month %in% c(7,8,9,10)) |> 
  group_by(year, event_date, species, fin_mark) |>
  summarise(daily_catch = sum(fish_count)) |> 
  ggplot(aes(event_date, daily_catch, color = species)) +
  ggtitle("2023") +
  geom_point()

# plot daily encounters of Chinook by fin_mark for 2023
catch |> 
  filter(species %in% c("Chinook") 
         & (year == 2023) 
         & month %in% c(7,8,9,10)) |> 
  group_by(year, event_date, species, fin_mark) |>
  summarise(daily_catch = sum(fish_count)) |> 
  ggplot(aes(event_date, daily_catch, color = fin_mark)) +
  ggtitle("2023") +
  scale_color_brewer(palette="Blues") +
  theme_bw() +
  geom_point(size = 3)


# next - add tribal net data and compare weekly or other time strata mark rates from net data and creel based interviews 


```

## Collin Modeling

Looking at smoothing splines fit to unmarked chinook and all pink salmon. Can we see a difference in phenology? Relative abundance?

### 2023

```{r}

doy_2md=function(i){
  ymd=as.Date(i-1, origin="2019-01-01")
  return(format(ymd, "%b %d"))
}

dat.2023 = 
  catch |> 
  filter(species == "Pink" | species == "Chinook" & fin_mark == "UM") |> 
   count(year, event_date, species, name = "daily_catch") |> 
  mutate(doy = yday(event_date),
         species.fac = as.factor(species))

## smoothing spline using a negative binomial distribution (good for count data)
out = gam(daily_catch ~ s(doy, by = species.fac),
           method = "REML", family = "nb",
          data = dat.2023)
## plotting the  smooths themselves:
draw(out)

## checking for issues the smooth flexibility
gam.check(out)

## looks good

dat.pred = expand_grid(doy = evenly(dat.2023$doy, by = 0.1),
                     species.fac = unique(dat.2023$species.fac)
                     )
dat.pred$daily_catch = predict(out, newdata = dat.pred, type = "response")

ggplot(dat.pred, aes(x = doy, y = daily_catch, col = species.fac))+
  geom_path()+
  geom_point(data = dat.2023)+
    scale_x_continuous(labels = doy_2md)+
    theme_bw(base_size = 14)+
  xlab("date")+
  ggtitle("2023 with smoothing splines")


pred.ratio.2023 = dat.pred |> 
  pivot_wider(names_from = species.fac, 
              values_from = daily_catch) |> 
  mutate(proportion.chinook = Chinook / (Chinook + Pink))
# dat.ratio.2023 = dat.2023 |> 
#   pivot_wider(names_from = species, 
#               values_from = daily_catch) |> 
#   mutate(proportion.chinook = Chinook / (Chinook + Pink))
ggplot(pred.ratio.2023, aes(x = doy, y = proportion.chinook))+
  geom_path()+
  theme_bw(base_size = 14)+
  scale_x_continuous(labels = doy_2md)+
    xlab("date")+
  ggtitle("2023 Proportion of Unmarked chinook")

## estimating uncertainty

# Something with this code, but I'm missing a couple of steps. I'm going to cheat
# and just use smooth_samples()
# 
# br = gam.mh(out, thin = 2, ns = 2000, rw.scale = .4)$bs
# ## matrix math time!
# Xp = predict(out, newdata = dat.pred, type = 'lpmatrix')
# ## normally we would need to drop columns not associated with the smooth, but ALL cols are associated with the smooth)
# Vb = vcov(out)
# beta_sim = rmvn(n = 20, coef(out), Vb)

sm_post = smooth_samples(out, "s(doy",
               n = 20, seed = 42,
               partial_match = TRUE)
draw(sm_post)

```

### 2021

```{r}
dat.2021 = 
  catch |> 
  filter(species == "Pink" | species == "Chinook" & fin_mark == "UM") |> 
   count(year, event_date, species, name = "daily_catch") |> 
  mutate(doy = yday(event_date),
         species.fac = as.factor(species))

## smoothing spline using a negative binomial distribution (good for count data)
out = gam(daily_catch ~ s(doy, by = species.fac),
           method = "REML", family = "nb",
          data = dat.2021)
## plotting the  smooths themselves:
draw(out)

## checking for issues the smooth flexibility
gam.check(out)

## looks good

dat.pred = expand_grid(doy = evenly(dat.2021$doy, by = 0.1),
                     species.fac = unique(dat.2021$species.fac)
                     )
dat.pred$daily_catch = predict(out, newdata = dat.pred, type = "response")

ggplot(dat.pred, aes(x = doy, y = daily_catch, col = species.fac))+
  geom_path()+
  geom_point(data = dat.2021)+
    scale_x_continuous(labels = doy_2md)+
    theme_bw(base_size = 14)+
  xlab("date")+
  ggtitle("2021 with smoothing splines")


pred.ratio.2021 = dat.pred |> 
  pivot_wider(names_from = species.fac, 
              values_from = daily_catch) |> 
  mutate(proportion.chinook = Chinook / (Chinook + Pink))
# dat.ratio.2021 = dat.2021 |> 
#   pivot_wider(names_from = species, 
#               values_from = daily_catch) |> 
#   mutate(proportion.chinook = Chinook / (Chinook + Pink))
ggplot(pred.ratio.2021, aes(x = doy, y = proportion.chinook))+
  geom_path()+
  theme_bw(base_size = 14)+
  scale_x_continuous(labels = doy_2md)+
    xlab("date")+
  ggtitle("2021 Proportion of Unmarked chinook")

## estimating uncertainty

# Something with this code, but I'm missing a couple of steps. I'm going to cheat
# and just use smooth_samples()
# 
# br = gam.mh(out, thin = 2, ns = 2000, rw.scale = .4)$bs
# ## matrix math time!
# Xp = predict(out, newdata = dat.pred, type = 'lpmatrix')
# ## normally we would need to drop columns not associated with the smooth, but ALL cols are associated with the smooth)
# Vb = vcov(out)
# beta_sim = rmvn(n = 20, coef(out), Vb)

sm_post = smooth_samples(out, "s(doy",
               n = 20, seed = 42,
               partial_match = TRUE)
draw(sm_post)

```

## Colt - mark rate comparison

Importing tribal net data from cleaned_data/tidy_net_mark_rates.csv. Originally in Excel spreadsheet format (original_data/Net Mark Rate for Creel 2021-2023_021624_DateLineUpFINAL.xlsx), transformed to tidy format in scripts/tidy_net_mark_rates.R, and saved to cleaned_data folder.

```{r}
data_tribal_net <- readr::read_csv("../cleaned_data/tidy_net_mark_rates.csv")

#format tribal net data
data_tribal_net <- data_tribal_net |> 
  dplyr::mutate(
    fate = dplyr::case_when(
      fate == "released" ~ "Released",
      fate == "kept" ~ "Kept",
      TRUE ~ fate
    ),
    fin_mark = dplyr::case_when(
      fin_mark == "ad" ~ "AD",
      fin_mark == "um" ~ "UM",
      TRUE ~ fin_mark
    )
  ) |> 
  dplyr::rename(fish_count = catch)

#filter creel catch data to Chinook
data_creel_catch_Chinook <- catch |> 
  dplyr::filter(species == "Chinook",
                life_stage == "Adult") |> 
  #format to match tribal net dataframe
  dplyr::select(fin_mark, fate, fish_count, event_date, year)

#take tribal stat_weeks and parse into dates by year
#join this with creel data to assign the same time periods to stat weeks
stat_weeks <- data_tribal_net |> 
  dplyr::select(year, stat_week, day_interval) |>
  dplyr::mutate(
    day_interval = dplyr::case_when(
      day_interval == "10/33-11/06" ~ "10/31-11/06", #fixing error in dates
      TRUE ~ day_interval 
    ),
    # Extract and parse start and end dates
    start_date = lubridate::mdy(paste0(sub("-.*", "", day_interval), "/", year)),
    end_date = lubridate::mdy(paste0(sub(".+-", "", day_interval), "/", year))
  ) |> 
  dplyr::select(-day_interval) |> 
  dplyr::distinct()

#assign stat week to creel data
data_creel_catch_Chinook <- data_creel_catch_Chinook |> 
  dplyr::left_join(stat_weeks, by = "year") |> 
  dplyr::filter(event_date >= start_date & event_date <= end_date) |> 
  dplyr::select(-start_date, -end_date, -event_date) |> 
  dplyr::mutate(source = "creel")

#make id col
data_tribal_net <- data_tribal_net |> 
  dplyr::mutate(source = "tribal") |> 
  dplyr::select(-day_interval)

#combine rec creel and tribal net data
data_combined <- dplyr::bind_rows(data_creel_catch_Chinook, data_tribal_net)

#calculate mark rate
data_combined <- data_combined |> 
  dplyr::group_by(source, year, stat_week) |> 
  dplyr::mutate(
    total_fish = sum(fish_count, na.rm = TRUE),
    ad_fish = sum(fish_count[fin_mark == "AD"], na.rm = TRUE),
    mark_rate = round((total_fish - ad_fish) / total_fish, 2)
  ) |> 
  dplyr::filter(!is.na(mark_rate)) |> 
  dplyr::ungroup()

#plot
data_combined |> 
  ggplot2::ggplot(aes(x = stat_week, y = mark_rate, col = source)) +
  ggplot2::geom_point(size = 2) +
  ggplot2::scale_x_continuous(limits=c(min(data_combined$stat_week)-1, max(data_combined$stat_week)), n.breaks = 15) +
  theme_bw()

```

Data frame containing both the creel data and tribal net data.

::: {.scroll-container style="overflow-y: auto; height: 300px;"}

```{r}
data_combined |> 
  dplyr::relocate(source, year, stat_week, fin_mark, fate, fish_count) |> 
  gt::gt()
```

:::